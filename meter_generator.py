import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from datetime import datetime, timedelta
import pandas as pd
import random
import openpyxl
from openpyxl.chart import LineChart, Reference
from openpyxl.utils.dataframe import dataframe_to_rows
import os
import calendar

class DatePicker:
    def __init__(self, parent):
        self.parent = parent
        self.selected_date = datetime.now()
        self.calendar_window = None
        
    def create_date_picker_widget(self, row, column, text="–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É:"):
        # –§—Ä–µ–π–º –¥–ª—è –¥–∞—Ç–∏
        date_frame = ttk.Frame(self.parent)
        date_frame.grid(row=row, column=0, columnspan=2, sticky=tk.W, pady=5)
        
        # –õ–µ–π–±–ª
        ttk.Label(date_frame, text=text).grid(row=0, column=0, sticky=tk.W)
        
        # –ü–æ–ª–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏
        self.date_var = tk.StringVar(value=self.selected_date.strftime("%d.%m.%Y"))
        self.date_display = ttk.Entry(date_frame, textvariable=self.date_var, 
                                     state="readonly", width=12)
        self.date_display.grid(row=0, column=1, padx=(10, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        calendar_btn = ttk.Button(date_frame, text="üìÖ", width=3, 
                                 command=self.open_calendar)
        calendar_btn.grid(row=0, column=2)
        
        # –ö–Ω–æ–ø–∫–∞ "–°—å–æ–≥–æ–¥–Ω—ñ"
        today_btn = ttk.Button(date_frame, text="–°—å–æ–≥–æ–¥–Ω—ñ", 
                              command=self.set_today)
        today_btn.grid(row=0, column=3, padx=(5, 0))
        
        return date_frame
    
    def set_today(self):
        self.selected_date = datetime.now()
        self.date_var.set(self.selected_date.strftime("%d.%m.%Y"))
    
    def open_calendar(self):
        if self.calendar_window:
            self.calendar_window.destroy()
            
        self.calendar_window = tk.Toplevel(self.parent)
        self.calendar_window.title("–í–∏–±—ñ—Ä –¥–∞—Ç–∏")
        self.calendar_window.geometry("300x400")
        self.calendar_window.resizable(False, False)
        self.calendar_window.transient(self.parent.winfo_toplevel())
        self.calendar_window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
        self.center_window(self.calendar_window, 300, 400)
        
        # –ü–æ—Ç–æ—á–Ω—ñ —Ä—ñ–∫ —Ç–∞ –º—ñ—Å—è—Ü—å
        self.current_year = self.selected_date.year
        self.current_month = self.selected_date.month
        
        self.create_calendar_interface()
    
    def center_window(self, window, width, height):
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –µ–∫—Ä–∞–Ω—É
        screen_width = window.winfo_screenwidth()
        screen_height = window.winfo_screenheight()
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∑–∏—Ü—ñ—ó
        x = (screen_width // 2) - (width // 2)
        y = (screen_height // 2) - (height // 2)
        
        window.geometry(f"{width}x{height}+{x}+{y}")
    
    def create_calendar_interface(self):
        # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞
        for widget in self.calendar_window.winfo_children():
            widget.destroy()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
        header_frame = ttk.Frame(self.calendar_window)
        header_frame.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–æ–∫—É
        ttk.Button(header_frame, text="<<", width=3, 
                  command=self.prev_year).grid(row=0, column=0)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º—ñ—Å—è—Ü—è
        ttk.Button(header_frame, text="<", width=3, 
                  command=self.prev_month).grid(row=0, column=1)
        
        # –ù–∞–∑–≤–∞ –º—ñ—Å—è—Ü—è —Ç–∞ —Ä–æ–∫—É
        month_names = ["", "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", 
                      "–ß–µ—Ä–≤–µ–Ω—å", "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", 
                      "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"]
        
        month_label = ttk.Label(header_frame, 
                               text=f"{month_names[self.current_month]} {self.current_year}",
                               font=("Arial", 12, "bold"))
        month_label.grid(row=0, column=2, padx=20)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
        ttk.Button(header_frame, text=">", width=3, 
                  command=self.next_month).grid(row=0, column=3)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–æ–∫—É
        ttk.Button(header_frame, text=">>", width=3, 
                  command=self.next_year).grid(row=0, column=4)
        
        # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞ —Å—ñ—Ç–∫–∞
        calendar_frame = ttk.Frame(self.calendar_window)
        calendar_frame.pack(pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
        days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]
        for i, day in enumerate(days):
            label = ttk.Label(calendar_frame, text=day, font=("Arial", 10, "bold"))
            label.grid(row=0, column=i, padx=2, pady=2)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        cal = calendar.monthcalendar(self.current_year, self.current_month)
        
        for week_num, week in enumerate(cal, 1):
            for day_num, day in enumerate(week):
                if day == 0:
                    # –ü–æ—Ä–æ–∂–Ω—è –∫–æ–º—ñ—Ä–∫–∞
                    ttk.Label(calendar_frame, text="").grid(row=week_num, column=day_num, 
                                                           padx=2, pady=2)
                else:
                    # –ö–Ω–æ–ø–∫–∞ –¥–Ω—è
                    day_btn = tk.Button(calendar_frame, text=str(day), width=3, height=1,
                                       command=lambda d=day: self.select_date(d))
                    
                    # –í–∏–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
                    if (day == self.selected_date.day and 
                        self.current_month == self.selected_date.month and 
                        self.current_year == self.selected_date.year):
                        day_btn.config(bg="#007ACC", fg="white", font=("Arial", 10, "bold"))
                    
                    # –í–∏–¥—ñ–ª–µ–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ—ó –¥–∞—Ç–∏
                    today = datetime.now()
                    if (day == today.day and 
                        self.current_month == today.month and 
                        self.current_year == today.year):
                        day_btn.config(bg="#90EE90")
                    
                    day_btn.grid(row=week_num, column=day_num, padx=1, pady=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        button_frame = ttk.Frame(self.calendar_window)
        button_frame.pack(pady=20)
        
        ttk.Button(button_frame, text="–°—å–æ–≥–æ–¥–Ω—ñ", 
                  command=self.select_today).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="OK", 
                  command=self.confirm_date).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–°–∫–∞—Å—É–≤–∞—Ç–∏", 
                  command=self.cancel_date).pack(side=tk.LEFT, padx=5)
    
    def prev_year(self):
        self.current_year -= 1
        self.create_calendar_interface()
    
    def next_year(self):
        self.current_year += 1
        self.create_calendar_interface()
    
    def prev_month(self):
        if self.current_month == 1:
            self.current_month = 12
            self.current_year -= 1
        else:
            self.current_month -= 1
        self.create_calendar_interface()
    
    def next_month(self):
        if self.current_month == 12:
            self.current_month = 1
            self.current_year += 1
        else:
            self.current_month += 1
        self.create_calendar_interface()
    
    def select_date(self, day):
        self.selected_date = datetime(self.current_year, self.current_month, day)
        self.create_calendar_interface()  # –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    
    def select_today(self):
        today = datetime.now()
        self.current_year = today.year
        self.current_month = today.month
        self.selected_date = today
        self.create_calendar_interface()
    
    def confirm_date(self):
        self.date_var.set(self.selected_date.strftime("%d.%m.%Y"))
        self.calendar_window.destroy()
        self.calendar_window = None
    
    def cancel_date(self):
        self.calendar_window.destroy()
        self.calendar_window = None
    
    def get_date(self):
        return self.selected_date

class MeterDataGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–∏—Ö –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤")
        self.root.geometry("600x500")
        self.root.configure(bg='#f0f0f0')
        
        # –°—Ç–∏–ª—ñ
        style = ttk.Style()
        style.theme_use('clam')
        
        self.create_widgets()
    
    def create_widgets(self):
        # –ì–æ–ª–æ–≤–Ω–∏–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–∏—Ö –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 20))
        
        # –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É
        ttk.Label(main_frame, text="–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É (–†–†–†–†-–ú–ú-–î–î):").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.date_entry = ttk.Entry(main_frame, width=20)
        self.date_entry.insert(0, "2024-01-01")
        self.date_entry.grid(row=1, column=1, sticky=tk.W, pady=5)
        
        # –ù–æ–º–µ—Ä –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
        ttk.Label(main_frame, text="–ù–æ–º–µ—Ä –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.meter_number_entry = ttk.Entry(main_frame, width=20)
        self.meter_number_entry.insert(0, "001")
        self.meter_number_entry.grid(row=2, column=1, sticky=tk.W, pady=5)
        
        # –ß–∞—Å –ø–æ—á–∞—Ç–∫—É
        time_frame = ttk.Frame(main_frame)
        time_frame.grid(row=3, column=0, columnspan=2, sticky=tk.W, pady=5)
        
        ttk.Label(time_frame, text="–ß–∞—Å –ø–æ—á–∞—Ç–∫—É:").grid(row=0, column=0, sticky=tk.W)
        
        self.hour_var = tk.StringVar(value="00")
        self.minute_var = tk.StringVar(value="00")
        
        hour_spinbox = ttk.Spinbox(time_frame, from_=0, to=23, width=5, 
                                  textvariable=self.hour_var, format="%02.0f")
        hour_spinbox.grid(row=0, column=1, padx=(10, 5))
        
        ttk.Label(time_frame, text=":").grid(row=0, column=2)
        
        minute_spinbox = ttk.Spinbox(time_frame, values=[f"{i:02d}" for i in range(0, 60, 10)], 
                                   width=5, textvariable=self.minute_var)
        minute_spinbox.grid(row=0, column=3, padx=(5, 0))
        
        # –î—ñ–∞–ø–∞–∑–æ–Ω –Ω–∞–ø—Ä—É–≥–∏
        ttk.Label(main_frame, text="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –Ω–∞–ø—Ä—É–≥–∞ (–í):").grid(row=4, column=0, sticky=tk.W, pady=5)
        self.min_voltage_entry = ttk.Entry(main_frame, width=20)
        self.min_voltage_entry.insert(0, "220.00")
        self.min_voltage_entry.grid(row=4, column=1, sticky=tk.W, pady=5)
        
        ttk.Label(main_frame, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –Ω–∞–ø—Ä—É–≥–∞ (–í):").grid(row=5, column=0, sticky=tk.W, pady=5)
        self.max_voltage_entry = ttk.Entry(main_frame, width=20)
        self.max_voltage_entry.insert(0, "240.00")
        self.max_voltage_entry.grid(row=5, column=1, sticky=tk.W, pady=5)
        
        # –¢–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
        ttk.Label(main_frame, text="–¢–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:").grid(row=6, column=0, sticky=tk.W, pady=5)
        self.meter_type_var = tk.StringVar(value="1-—Ñ–∞–∑–Ω–∏–π")
        meter_type_combo = ttk.Combobox(main_frame, textvariable=self.meter_type_var, 
                                       values=["1-—Ñ–∞–∑–Ω–∏–π", "3-—Ñ–∞–∑–Ω–∏–π"], state="readonly", width=17)
        meter_type_combo.grid(row=6, column=1, sticky=tk.W, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=7, column=0, columnspan=2, pady=(30, 10))
        
        generate_btn = ttk.Button(button_frame, text="–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ", 
                                command=self.generate_data, style='Accent.TButton')
        generate_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        save_btn = ttk.Button(button_frame, text="–ó–±–µ—Ä–µ–≥—Ç–∏ Excel", 
                            command=self.save_excel)
        save_btn.pack(side=tk.LEFT)
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        self.progress = ttk.Progressbar(main_frame, length=400, mode='determinate')
        self.progress.grid(row=8, column=0, columnspan=2, pady=10, sticky=(tk.W, tk.E))
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(main_frame, text="–ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏", 
                                    foreground='green')
        self.status_label.grid(row=9, column=0, columnspan=2, pady=5)
        
        self.data = None
    
    def validate_input(self):
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞—Ç–∏
            datetime.strptime(self.date_entry.get(), "%Y-%m-%d")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ø—Ä—É–≥–∏
            min_voltage = float(self.min_voltage_entry.get())
            max_voltage = float(self.max_voltage_entry.get())
            
            if min_voltage >= max_voltage:
                raise ValueError("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –Ω–∞–ø—Ä—É–≥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –º–µ–Ω—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
            if not self.meter_number_entry.get().strip():
                raise ValueError("–ù–æ–º–µ—Ä –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º")
            
            return True, min_voltage, max_voltage
            
        except ValueError as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ: {str(e)}")
            return False, None, None
    
    def generate_data(self):
        valid, min_voltage, max_voltage = self.validate_input()
        if not valid:
            return
        
        self.status_label.config(text="–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö...", foreground='blue')
        self.progress['value'] = 0
        self.root.update()
        
        try:
            # –ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            start_date = datetime.strptime(self.date_entry.get(), "%Y-%m-%d")
            start_time = datetime.combine(start_date.date(), 
                                        datetime.strptime(f"{self.hour_var.get()}:{self.minute_var.get()}", 
                                                        "%H:%M").time())
            
            meter_number = self.meter_number_entry.get().strip()
            is_three_phase = self.meter_type_var.get() == "3-—Ñ–∞–∑–Ω–∏–π"
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
            data = []
            current_time = start_time
            
            for i in range(1200):
                row = {
                    '–ù–æ–º–µ—Ä –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞': meter_number,
                    '–î–∞—Ç–∞': current_time.strftime("%Y-%m-%d"),
                    '–ß–∞—Å': current_time.strftime("%H:%M"),
                    '–§–∞–∑–∞ A': round(random.uniform(min_voltage, max_voltage), 2)
                }
                
                if is_three_phase:
                    row['–§–∞–∑–∞ B'] = round(random.uniform(min_voltage, max_voltage), 2)
                    row['–§–∞–∑–∞ C'] = round(random.uniform(min_voltage, max_voltage), 2)
                
                data.append(row)
                current_time += timedelta(minutes=10)
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
                if i % 50 == 0:
                    self.progress['value'] = (i / 1200) * 100
                    self.root.update()
            
            self.data = pd.DataFrame(data)
            self.progress['value'] = 100
            self.status_label.config(text=f"–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤", foreground='green')
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö: {str(e)}")
            self.status_label.config(text="–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó", foreground='red')
    
    def save_excel(self):
        if self.data is None:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ –¥–∞–Ω—ñ")
            return
        
        file_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")],
            title="–ó–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª Excel"
        )
        
        if not file_path:
            return
        
        self.status_label.config(text="–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É...", foreground='blue')
        self.progress['value'] = 0
        self.root.update()
        
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É
            with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ –Ω–∞ –ø–µ—Ä—à–∏–π –ª–∏—Å—Ç
                self.data.to_excel(writer, sheet_name='–î–∞–Ω—ñ', index=False)
                
                # –û—Ç—Ä–∏–º—É—î–º–æ workbook —Ç–∞ worksheet
                workbook = writer.book
                worksheet = writer.sheets['–î–∞–Ω—ñ']
                
                # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    worksheet.column_dimensions[column_letter].width = max_length + 2
                
                self.progress['value'] = 50
                self.root.update()
                
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏
                self.create_chart(workbook)
                
            self.progress['value'] = 100
            self.status_label.config(text=f"–§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {file_path}", foreground='green')
            messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–§–∞–π–ª Excel –∑–±–µ—Ä–µ–∂–µ–Ω–æ:\n{file_path}")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {str(e)}")
            self.status_label.config(text="–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", foreground='red')
    
    def create_chart(self, workbook):
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è –¥—ñ–∞–≥—Ä–∞–º–∏
        chart_sheet = workbook.create_sheet(title="–î—ñ–∞–≥—Ä–∞–º–∞")
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –¥—ñ–∞–≥—Ä–∞–º–∏ (—Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ –≥–æ–¥–∏–Ω–∞—Ö)
        self.data['DateTime'] = pd.to_datetime(self.data['–î–∞—Ç–∞'] + ' ' + self.data['–ß–∞—Å'])
        hourly_data = self.data.groupby(self.data['DateTime'].dt.floor('H')).agg({
            '–§–∞–∑–∞ A': ['min', 'max', 'mean']
        }).round(2)
        
        is_three_phase = '–§–∞–∑–∞ B' in self.data.columns
        
        if is_three_phase:
            hourly_data_b = self.data.groupby(self.data['DateTime'].dt.floor('H')).agg({
                '–§–∞–∑–∞ B': ['min', 'max', 'mean']
            }).round(2)
            hourly_data_c = self.data.groupby(self.data['DateTime'].dt.floor('H')).agg({
                '–§–∞–∑–∞ C': ['min', 'max', 'mean']
            }).round(2)
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –¥—ñ–∞–≥—Ä–∞–º–∏
        chart_data = []
        for i, (timestamp, row) in enumerate(hourly_data.iterrows()):
            chart_row = {
                '–ß–∞—Å': timestamp.strftime('%H:%M'),
                '–§–∞–∑–∞ A (–º—ñ–Ω)': row[('–§–∞–∑–∞ A', 'min')],
                '–§–∞–∑–∞ A (–º–∞–∫—Å)': row[('–§–∞–∑–∞ A', 'max')],
                '–§–∞–∑–∞ A (—Å–µ—Ä)': row[('–§–∞–∑–∞ A', 'mean')]
            }
            
            if is_three_phase:
                chart_row.update({
                    '–§–∞–∑–∞ B (–º—ñ–Ω)': hourly_data_b.iloc[i][('–§–∞–∑–∞ B', 'min')],
                    '–§–∞–∑–∞ B (–º–∞–∫—Å)': hourly_data_b.iloc[i][('–§–∞–∑–∞ B', 'max')],
                    '–§–∞–∑–∞ B (—Å–µ—Ä)': hourly_data_b.iloc[i][('–§–∞–∑–∞ B', 'mean')],
                    '–§–∞–∑–∞ C (–º—ñ–Ω)': hourly_data_c.iloc[i][('–§–∞–∑–∞ C', 'min')],
                    '–§–∞–∑–∞ C (–º–∞–∫—Å)': hourly_data_c.iloc[i][('–§–∞–∑–∞ C', 'max')],
                    '–§–∞–∑–∞ C (—Å–µ—Ä)': hourly_data_c.iloc[i][('–§–∞–∑–∞ C', 'mean')]
                })
            
            chart_data.append(chart_row)
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ –Ω–∞ –ª–∏—Å—Ç –¥—ñ–∞–≥—Ä–∞–º–∏
        chart_df = pd.DataFrame(chart_data)
        for r_idx, row in enumerate(dataframe_to_rows(chart_df, index=False, header=True), 1):
            for c_idx, value in enumerate(row, 1):
                chart_sheet.cell(row=r_idx, column=c_idx, value=value)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–Ω—ñ–π–Ω–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏
        chart = LineChart()
        chart.title = "–ê–Ω–∞–ª—ñ–∑ –Ω–∞–ø—Ä—É–≥–∏ –ø–æ –≥–æ–¥–∏–Ω–∞—Ö"
        chart.style = 10
        chart.x_axis.title = '–ß–∞—Å'
        chart.y_axis.title = '–ù–∞–ø—Ä—É–≥–∞ (–í)'
        chart.width = 20
        chart.height = 12
        
        # –î–∞–Ω—ñ –¥–ª—è –¥—ñ–∞–≥—Ä–∞–º–∏
        data_range = Reference(chart_sheet, min_col=2, min_row=1, 
                              max_col=len(chart_df.columns), max_row=len(chart_df) + 1)
        cats = Reference(chart_sheet, min_col=1, min_row=2, max_row=len(chart_df) + 1)
        
        chart.add_data(data_range, titles_from_data=True)
        chart.set_categories(cats)
        
        # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏
        chart_sheet.add_chart(chart, "A10")

def main():
    root = tk.Tk()
    app = MeterDataGenerator(root)
    root.mainloop()

if __name__ == "__main__":
    main()
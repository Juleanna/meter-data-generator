#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from datetime import datetime, timedelta
import pandas as pd
import random
import calendar

# –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É openpyxl
try:
    import openpyxl
    from openpyxl.chart import LineChart, Reference
    from openpyxl.utils.dataframe import dataframe_to_rows
    OPENPYXL_AVAILABLE = True
except ImportError:
    OPENPYXL_AVAILABLE = False

class SimpleCalendar:
    def __init__(self, parent):
        self.parent = parent
        self.selected_date = datetime.now()
        self.calendar_window = None
        
        # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–∞–∑–≤–∏
        self.month_names = ["", "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", 
                           "–ß–µ—Ä–≤–µ–Ω—å", "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", 
                           "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"]
    
    def open_calendar(self, date_var, button):
        if self.calendar_window:
            self.calendar_window.destroy()
            
        self.calendar_window = tk.Toplevel(self.parent)
        self.calendar_window.title("–ö–∞–ª–µ–Ω–¥–∞—Ä")
        self.calendar_window.geometry("300x350")
        self.calendar_window.resizable(False, False)
        
        # –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è
        try:
            button_x = button.winfo_rootx()
            button_y = button.winfo_rooty() + button.winfo_height()
            self.calendar_window.geometry(f"300x350+{button_x}+{button_y}")
        except:
            pass
        
        self.current_year = self.selected_date.year
        self.current_month = self.selected_date.month
        self.date_var = date_var
        
        self.create_calendar_content()
    
    def create_calendar_content(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Frame(self.calendar_window)
        header.pack(pady=10)
        
        tk.Button(header, text="‚óÑ", width=3, command=self.prev_month).pack(side=tk.LEFT)
        
        month_label = tk.Label(header, text=f"{self.month_names[self.current_month]} {self.current_year}",
                              font=("Arial", 12, "bold"))
        month_label.pack(side=tk.LEFT, padx=20)
        
        tk.Button(header, text="‚ñ∫", width=3, command=self.next_month).pack(side=tk.LEFT)
        
        # –ö–∞–ª–µ–Ω–¥–∞—Ä
        cal_frame = tk.Frame(self.calendar_window)
        cal_frame.pack(pady=10)
        
        # –î–Ω—ñ —Ç–∏–∂–Ω—è
        days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]
        for i, day in enumerate(days):
            tk.Label(cal_frame, text=day, font=("Arial", 9, "bold"), width=4).grid(row=0, column=i)
        
        # –î–Ω—ñ –º—ñ—Å—è—Ü—è
        cal = calendar.monthcalendar(self.current_year, self.current_month)
        for week_num, week in enumerate(cal, 1):
            for day_num, day in enumerate(week):
                if day == 0:
                    tk.Label(cal_frame, text="", width=4).grid(row=week_num, column=day_num)
                else:
                    btn = tk.Button(cal_frame, text=str(day), width=3, height=1,
                                   command=lambda d=day: self.select_date(d))
                    
                    # –í–∏–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
                    today = datetime.now()
                    if (day == today.day and 
                        self.current_month == today.month and 
                        self.current_year == today.year):
                        btn.config(bg='lightgreen')
                    
                    # –í–∏–¥—ñ–ª–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏
                    if (day == self.selected_date.day and 
                        self.current_month == self.selected_date.month and 
                        self.current_year == self.selected_date.year):
                        btn.config(bg='lightblue')
                    
                    btn.grid(row=week_num, column=day_num, padx=1, pady=1)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(self.calendar_window)
        btn_frame.pack(pady=10)
        
        tk.Button(btn_frame, text="–°—å–æ–≥–æ–¥–Ω—ñ", command=self.select_today).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–ó–∞–∫—Ä–∏—Ç–∏", command=self.close_calendar).pack(side=tk.LEFT, padx=5)
    
    def prev_month(self):
        if self.current_month == 1:
            self.current_month = 12
            self.current_year -= 1
        else:
            self.current_month -= 1
        self.update_calendar()
    
    def next_month(self):
        if self.current_month == 12:
            self.current_month = 1
            self.current_year += 1
        else:
            self.current_month += 1
        self.update_calendar()
    
    def update_calendar(self):
        for widget in self.calendar_window.winfo_children():
            widget.destroy()
        self.create_calendar_content()
    
    def select_date(self, day):
        self.selected_date = datetime(self.current_year, self.current_month, day)
        self.date_var.set(self.selected_date.strftime("%d.%m.%Y"))
        self.close_calendar()
    
    def select_today(self):
        today = datetime.now()
        self.current_year = today.year
        self.current_month = today.month
        self.selected_date = today
        self.date_var.set(self.selected_date.strftime("%d.%m.%Y"))
        self.close_calendar()
    
    def close_calendar(self):
        if self.calendar_window:
            self.calendar_window.destroy()
            self.calendar_window = None

class MeterDataGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–∏—Ö –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤")
        self.root.geometry("750x580")
        self.root.configure(bg='#f8f9fa')
        
        self.create_widgets()
    
    def create_widgets(self):
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main = tk.Frame(self.root, bg='#f8f9fa', padx=10, pady=8)
        main.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(main, text="‚ö° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–∏—Ö –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤", 
                        font=('Arial', 14, 'bold'), bg='#f8f9fa', fg='#2c3e50')
        title.pack(pady=(0, 8))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–æ—Ä–º–∏
        form = tk.Frame(main, bg='white', relief='solid', bd=1, padx=10, pady=8)
        form.pack(fill=tk.BOTH, expand=True)
        
        # –†–Ø–î 1: –î–∞—Ç–∞ + –ß–∞—Å + –ù–æ–º–µ—Ä + –¢–∏–ø
        row1 = tk.Frame(form, bg='white')
        row1.pack(fill=tk.X, pady=(0, 8))
        
        # –î–∞—Ç–∞
        date_frame = tk.Frame(row1, bg='white')
        date_frame.pack(side=tk.LEFT)
        
        tk.Label(date_frame, text="üìÖ –î–∞—Ç–∞:", font=('Arial', 9, 'bold'), 
                bg='white').pack(anchor=tk.W)
        
        date_input = tk.Frame(date_frame, bg='white')
        date_input.pack()
        
        self.date_var = tk.StringVar(value=datetime.now().strftime("%d.%m.%Y"))
        date_entry = tk.Entry(date_input, textvariable=self.date_var, state="readonly", 
                             width=9, font=('Arial', 9))
        date_entry.pack(side=tk.LEFT)
        
        self.calendar = SimpleCalendar(form)
        cal_btn = tk.Button(date_input, text="üìÖ", width=2, height=1, font=('Arial', 8),
                           command=lambda: self.calendar.open_calendar(self.date_var, cal_btn))
        cal_btn.pack(side=tk.LEFT, padx=(1, 0))
        
        # –ß–∞—Å
        time_frame = tk.Frame(row1, bg='white')
        time_frame.pack(side=tk.LEFT, padx=(15, 0))
        
        tk.Label(time_frame, text="üïê –ß–∞—Å:", font=('Arial', 9, 'bold'), 
                bg='white').pack(anchor=tk.W)
        
        time_input = tk.Frame(time_frame, bg='white')
        time_input.pack()
        
        self.hour_var = tk.StringVar(value="00")
        self.minute_var = tk.StringVar(value="00")
        
        hour_spin = tk.Spinbox(time_input, from_=0, to=23, width=3, textvariable=self.hour_var,
                              font=('Arial', 9))
        hour_spin.pack(side=tk.LEFT)
        
        tk.Label(time_input, text=":", bg='white', font=('Arial', 10)).pack(side=tk.LEFT)
        
        minute_spin = tk.Spinbox(time_input, values=[f"{i:02d}" for i in range(0, 60, 10)], 
                                width=3, textvariable=self.minute_var, font=('Arial', 9))
        minute_spin.pack(side=tk.LEFT)
        
        # –ù–æ–º–µ—Ä –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞
        num_frame = tk.Frame(row1, bg='white')
        num_frame.pack(side=tk.LEFT, padx=(15, 0))
        
        tk.Label(num_frame, text="üî¢ –ù–æ–º–µ—Ä:", font=('Arial', 9, 'bold'), 
                bg='white').pack(anchor=tk.W)
        self.meter_entry = tk.Entry(num_frame, width=8, font=('Arial', 9))
        self.meter_entry.insert(0, "001")
        self.meter_entry.pack()
        
        # –¢–∏–ø –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞
        type_frame = tk.Frame(row1, bg='white')
        type_frame.pack(side=tk.LEFT, padx=(15, 0))
        
        tk.Label(type_frame, text="‚öôÔ∏è –¢–∏–ø:", font=('Arial', 9, 'bold'), 
                bg='white').pack(anchor=tk.W)
        self.meter_type = tk.StringVar(value="1-—Ñ–∞–∑–Ω–∏–π")
        type_combo = ttk.Combobox(type_frame, textvariable=self.meter_type, 
                                 values=["1-—Ñ–∞–∑–Ω–∏–π", "3-—Ñ–∞–∑–Ω–∏–π"], state="readonly", 
                                 width=9, font=('Arial', 9))
        type_combo.pack()
        
        # –†–Ø–î 2: –ù–∞–ø—Ä—É–≥–∞
        row2 = tk.Frame(form, bg='white')
        row2.pack(fill=tk.X, pady=(0, 8))
        
        # –ú—ñ–Ω –Ω–∞–ø—Ä—É–≥–∞
        min_frame = tk.Frame(row2, bg='white')
        min_frame.pack(side=tk.LEFT)
        
        tk.Label(min_frame, text="‚ö° –ú—ñ–Ω. (–í):", font=('Arial', 9, 'bold'), 
                bg='white').pack(anchor=tk.W)
        self.min_volt = tk.Entry(min_frame, width=10, font=('Arial', 9))
        self.min_volt.insert(0, "220.00")
        self.min_volt.pack()
        
        # –ú–∞–∫—Å –Ω–∞–ø—Ä—É–≥–∞
        max_frame = tk.Frame(row2, bg='white')
        max_frame.pack(side=tk.LEFT, padx=(20, 0))
        
        tk.Label(max_frame, text="‚ö° –ú–∞–∫—Å. (–í):", font=('Arial', 9, 'bold'), 
                bg='white').pack(anchor=tk.W)
        self.max_volt = tk.Entry(max_frame, width=10, font=('Arial', 9))
        self.max_volt.insert(0, "240.00")
        self.max_volt.pack()
        
        # –†–Ø–î 3: –ö–Ω–æ–ø–∫–∏
        row3 = tk.Frame(form, bg='white')
        row3.pack(fill=tk.X, pady=(0, 8))
        
        self.gen_btn = tk.Button(row3, text="‚ö° –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏", font=('Arial', 10, 'bold'), 
                                bg='#007bff', fg='white', padx=15, pady=5,
                                command=self.generate_data)
        self.gen_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.save_btn = tk.Button(row3, text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ Excel", font=('Arial', 10, 'bold'),
                                 bg='#28a745', fg='white', padx=15, pady=5,
                                 command=self.save_excel)
        self.save_btn.pack(side=tk.LEFT)
        
        # –†–Ø–î 4: –ü—Ä–æ–≥—Ä–µ—Å
        row4 = tk.Frame(form, bg='white')
        row4.pack(fill=tk.X, pady=(0, 5))
        
        tk.Label(row4, text="üìä –ü—Ä–æ–≥—Ä–µ—Å:", font=('Arial', 8, 'bold'), 
                bg='white').pack(anchor=tk.W)
        
        self.progress = ttk.Progressbar(row4, length=320, mode='determinate')
        self.progress.pack(fill=tk.X, pady=(1, 0))
        
        # –†–Ø–î 5: –°—Ç–∞—Ç—É—Å
        row5 = tk.Frame(form, bg='#e9ecef', relief='solid', bd=1, pady=3)
        row5.pack(fill=tk.X)
        
        self.status = tk.Label(row5, text="‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏", 
                              font=('Arial', 9, 'bold'), fg='#28a745', bg='#e9ecef')
        self.status.pack()
        
        self.data = None
    
    def generate_data(self):
        try:
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            date_str = self.date_var.get()
            start_date = datetime.strptime(date_str, "%d.%m.%Y")
            start_time = datetime.combine(start_date.date(), 
                                        datetime.strptime(f"{self.hour_var.get()}:{self.minute_var.get()}", 
                                                        "%H:%M").time())
            
            meter_num = self.meter_entry.get().strip()
            if not meter_num:
                raise ValueError("–ù–æ–º–µ—Ä –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—É—Å—Ç–∏–º")
            
            min_volt = float(self.min_volt.get())
            max_volt = float(self.max_volt.get())
            
            if min_volt >= max_volt:
                raise ValueError("–ú—ñ–Ω. –Ω–∞–ø—Ä—É–≥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –º–µ–Ω—à–µ –º–∞–∫—Å.")
            
            is_3phase = self.meter_type.get() == "3-—Ñ–∞–∑–Ω–∏–π"
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è
            self.status.config(text="üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö...", fg='#007bff')
            self.progress['value'] = 0
            self.root.update()
            
            data = []
            current_time = start_time
            
            for i in range(1200):
                row = {
                    '–ù–æ–º–µ—Ä –ª—ñ—á—ñ–ª—å–Ω–∏–∫–∞': meter_num,
                    '–î–∞—Ç–∞': current_time.strftime("%Y-%m-%d"),
                    '–ß–∞—Å': current_time.strftime("%H:%M"),
                    '–§–∞–∑–∞ A': round(random.uniform(min_volt, max_volt), 2)
                }
                
                if is_3phase:
                    row['–§–∞–∑–∞ B'] = round(random.uniform(min_volt, max_volt), 2)
                    row['–§–∞–∑–∞ C'] = round(random.uniform(min_volt, max_volt), 2)
                
                data.append(row)
                current_time += timedelta(minutes=10)
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
                if i % 60 == 0:
                    progress_val = (i / 1200) * 100
                    self.progress['value'] = progress_val
                    self.status.config(text=f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è: {i}/1200 ({progress_val:.0f}%)")
                    self.root.update()
            
            self.data = pd.DataFrame(data)
            self.progress['value'] = 100
            self.status.config(text=f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤!", fg='#28a745')
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", str(e))
            self.status.config(text="‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó", fg='#dc3545')
            self.progress['value'] = 0
    
    def save_excel(self):
        if self.data is None:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ –¥–∞–Ω—ñ")
            return
        
        if not OPENPYXL_AVAILABLE:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ openpyxl:\npip install openpyxl")
            return
        
        try:
            file_path = filedialog.asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx")]
            )
            
            if not file_path:
                return
            
            self.status.config(text="üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...", fg='#007bff')
            self.progress['value'] = 20
            self.root.update()
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è Excel
            with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
                self.data.to_excel(writer, sheet_name='–î–∞–Ω—ñ', index=False)
                
                self.progress['value'] = 50
                self.status.config(text="üíæ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è...")
                self.root.update()
                
                workbook = writer.book
                worksheet = writer.sheets['–î–∞–Ω—ñ']
                
                # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                for column in worksheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    worksheet.column_dimensions[column_letter].width = max_length + 2
                
                self.progress['value'] = 70
                self.status.config(text="üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º...")
                self.root.update()
                
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏
                self.create_simple_chart(workbook)
                
                self.progress['value'] = 100
                self.root.update()
            
            self.status.config(text="‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", fg='#28a745')
            
            # –ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
            if messagebox.askyesno("–£—Å–ø—ñ—Ö", f"–§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ:\n{file_path}\n\n–í—ñ–¥–∫—Ä–∏—Ç–∏?"):
                try:
                    import os
                    os.startfile(file_path)
                except:
                    pass
                    
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:\n{str(e)}")
            self.status.config(text="‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è", fg='#dc3545')
    
    def create_simple_chart(self, workbook):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∏—Å—Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∏
            chart_sheet = workbook.create_sheet(title="–î—ñ–∞–≥—Ä–∞–º–∞")
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'h' –∑–∞–º—ñ—Å—Ç—å 'H')
            self.data['DateTime'] = pd.to_datetime(self.data['–î–∞—Ç–∞'] + ' ' + self.data['–ß–∞—Å'])
            hourly_data = self.data.groupby(self.data['DateTime'].dt.floor('h')).agg({
                '–§–∞–∑–∞ A': ['min', 'max', 'mean']
            }).round(2)
            
            is_three_phase = '–§–∞–∑–∞ B' in self.data.columns
            
            if is_three_phase:
                hourly_data_b = self.data.groupby(self.data['DateTime'].dt.floor('h')).agg({
                    '–§–∞–∑–∞ B': ['min', 'max', 'mean']
                }).round(2)
                hourly_data_c = self.data.groupby(self.data['DateTime'].dt.floor('h')).agg({
                    '–§–∞–∑–∞ C': ['min', 'max', 'mean']
                }).round(2)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¥–∞–Ω–∏—Ö
            chart_data = []
            for i, (timestamp, row) in enumerate(hourly_data.iterrows()):
                chart_row = {
                    '–ß–∞—Å': timestamp.strftime('%H:%M'),
                    '–§–∞–∑–∞ A –º—ñ–Ω': row[('–§–∞–∑–∞ A', 'min')],
                    '–§–∞–∑–∞ A –º–∞–∫—Å': row[('–§–∞–∑–∞ A', 'max')],
                    '–§–∞–∑–∞ A —Å–µ—Ä': row[('–§–∞–∑–∞ A', 'mean')]
                }
                
                if is_three_phase:
                    chart_row.update({
                        '–§–∞–∑–∞ B –º—ñ–Ω': hourly_data_b.iloc[i][('–§–∞–∑–∞ B', 'min')],
                        '–§–∞–∑–∞ B –º–∞–∫—Å': hourly_data_b.iloc[i][('–§–∞–∑–∞ B', 'max')],
                        '–§–∞–∑–∞ B —Å–µ—Ä': hourly_data_b.iloc[i][('–§–∞–∑–∞ B', 'mean')],
                        '–§–∞–∑–∞ C –º—ñ–Ω': hourly_data_c.iloc[i][('–§–∞–∑–∞ C', 'min')],
                        '–§–∞–∑–∞ C –º–∞–∫—Å': hourly_data_c.iloc[i][('–§–∞–∑–∞ C', 'max')],
                        '–§–∞–∑–∞ C —Å–µ—Ä': hourly_data_c.iloc[i][('–§–∞–∑–∞ C', 'mean')]
                    })
                
                chart_data.append(chart_row)
            
            # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∞–Ω—ñ –Ω–∞ –ª–∏—Å—Ç
            chart_df = pd.DataFrame(chart_data)
            for r_idx, row in enumerate(dataframe_to_rows(chart_df, index=False, header=True), 1):
                for c_idx, value in enumerate(row, 1):
                    chart_sheet.cell(row=r_idx, column=c_idx, value=value)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏
            chart = LineChart()
            chart.title = "–ê–Ω–∞–ª—ñ–∑ –Ω–∞–ø—Ä—É–≥–∏ –ø–æ –≥–æ–¥–∏–Ω–∞—Ö"
            chart.style = 2
            chart.x_axis.title = '–ü—Ä–æ–º—ñ–∂–æ–∫ —á–∞—Å—É (–≥–æ–¥–∏–Ω–∏)'
            chart.y_axis.title = '–ù–∞–ø—Ä—É–≥–∞ (–í)'
            chart.width = 20
            chart.height = 12
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–æ –¥—ñ–∞–≥—Ä–∞–º–∏
            data_range = Reference(chart_sheet, min_col=2, min_row=1, 
                                  max_col=len(chart_df.columns), max_row=len(chart_df) + 1)
            cats = Reference(chart_sheet, min_col=1, min_row=2, max_row=len(chart_df) + 1)
            
            chart.add_data(data_range, titles_from_data=True)
            chart.set_categories(cats)
            
            # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏
            chart_sheet.add_chart(chart, "A15")
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–≥—Ä–∞–º–∏: {e}")
            # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –¥—ñ–∞–≥—Ä–∞–º–∏

def main():
    root = tk.Tk()
    app = MeterDataGenerator(root)
    
    # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –µ–∫—Ä–∞–Ω—É
    root.update_idletasks()
    w = root.winfo_reqwidth()
    h = root.winfo_reqheight()
    
    screen_w = root.winfo_screenwidth()
    screen_h = root.winfo_screenheight()
    
    x = (screen_w - w) // 2
    y = max(10, (screen_h - h) // 2 - 50)
    
    root.geometry(f"{w}x{h}+{x}+{y}")
    
    root.mainloop()

if __name__ == "__main__":
    main()